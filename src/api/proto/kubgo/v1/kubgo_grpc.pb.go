// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kubgov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HealthServiceClient is the client API for HealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthServiceClient interface {
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type healthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthServiceClient(cc grpc.ClientConnInterface) HealthServiceClient {
	return &healthServiceClient{cc}
}

func (c *healthServiceClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/kubgo.v1.HealthService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthServiceServer is the server API for HealthService service.
// All implementations should embed UnimplementedHealthServiceServer
// for forward compatibility
type HealthServiceServer interface {
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
}

// UnimplementedHealthServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHealthServiceServer struct {
}

func (UnimplementedHealthServiceServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}

// UnsafeHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthServiceServer will
// result in compilation errors.
type UnsafeHealthServiceServer interface {
	mustEmbedUnimplementedHealthServiceServer()
}

func RegisterHealthServiceServer(s grpc.ServiceRegistrar, srv HealthServiceServer) {
	s.RegisterService(&HealthService_ServiceDesc, srv)
}

func _HealthService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubgo.v1.HealthService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthServiceServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthService_ServiceDesc is the grpc.ServiceDesc for HealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubgo.v1.HealthService",
	HandlerType: (*HealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _HealthService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kubgo/v1/kubgo.proto",
}

// KubgoServiceClient is the client API for KubgoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubgoServiceClient interface {
	FindKubgos(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FindKubgosResponse, error)
	AddKubgo(ctx context.Context, in *AddKubgoRequest, opts ...grpc.CallOption) (*AddKubgoResponse, error)
	GetKubgo(ctx context.Context, in *GetKubgoRequest, opts ...grpc.CallOption) (*GetKubgoResponse, error)
	DeleteKubgo(ctx context.Context, in *DeleteKubgoRequest, opts ...grpc.CallOption) (*DeleteKubgoResponse, error)
	UpdateKubgo(ctx context.Context, in *UpdateKubgoRequest, opts ...grpc.CallOption) (*UpdateKubgoResponse, error)
}

type kubgoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKubgoServiceClient(cc grpc.ClientConnInterface) KubgoServiceClient {
	return &kubgoServiceClient{cc}
}

func (c *kubgoServiceClient) FindKubgos(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FindKubgosResponse, error) {
	out := new(FindKubgosResponse)
	err := c.cc.Invoke(ctx, "/kubgo.v1.KubgoService/FindKubgos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubgoServiceClient) AddKubgo(ctx context.Context, in *AddKubgoRequest, opts ...grpc.CallOption) (*AddKubgoResponse, error) {
	out := new(AddKubgoResponse)
	err := c.cc.Invoke(ctx, "/kubgo.v1.KubgoService/AddKubgo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubgoServiceClient) GetKubgo(ctx context.Context, in *GetKubgoRequest, opts ...grpc.CallOption) (*GetKubgoResponse, error) {
	out := new(GetKubgoResponse)
	err := c.cc.Invoke(ctx, "/kubgo.v1.KubgoService/GetKubgo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubgoServiceClient) DeleteKubgo(ctx context.Context, in *DeleteKubgoRequest, opts ...grpc.CallOption) (*DeleteKubgoResponse, error) {
	out := new(DeleteKubgoResponse)
	err := c.cc.Invoke(ctx, "/kubgo.v1.KubgoService/DeleteKubgo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubgoServiceClient) UpdateKubgo(ctx context.Context, in *UpdateKubgoRequest, opts ...grpc.CallOption) (*UpdateKubgoResponse, error) {
	out := new(UpdateKubgoResponse)
	err := c.cc.Invoke(ctx, "/kubgo.v1.KubgoService/UpdateKubgo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubgoServiceServer is the server API for KubgoService service.
// All implementations should embed UnimplementedKubgoServiceServer
// for forward compatibility
type KubgoServiceServer interface {
	FindKubgos(context.Context, *emptypb.Empty) (*FindKubgosResponse, error)
	AddKubgo(context.Context, *AddKubgoRequest) (*AddKubgoResponse, error)
	GetKubgo(context.Context, *GetKubgoRequest) (*GetKubgoResponse, error)
	DeleteKubgo(context.Context, *DeleteKubgoRequest) (*DeleteKubgoResponse, error)
	UpdateKubgo(context.Context, *UpdateKubgoRequest) (*UpdateKubgoResponse, error)
}

// UnimplementedKubgoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKubgoServiceServer struct {
}

func (UnimplementedKubgoServiceServer) FindKubgos(context.Context, *emptypb.Empty) (*FindKubgosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindKubgos not implemented")
}
func (UnimplementedKubgoServiceServer) AddKubgo(context.Context, *AddKubgoRequest) (*AddKubgoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddKubgo not implemented")
}
func (UnimplementedKubgoServiceServer) GetKubgo(context.Context, *GetKubgoRequest) (*GetKubgoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubgo not implemented")
}
func (UnimplementedKubgoServiceServer) DeleteKubgo(context.Context, *DeleteKubgoRequest) (*DeleteKubgoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKubgo not implemented")
}
func (UnimplementedKubgoServiceServer) UpdateKubgo(context.Context, *UpdateKubgoRequest) (*UpdateKubgoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKubgo not implemented")
}

// UnsafeKubgoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubgoServiceServer will
// result in compilation errors.
type UnsafeKubgoServiceServer interface {
	mustEmbedUnimplementedKubgoServiceServer()
}

func RegisterKubgoServiceServer(s grpc.ServiceRegistrar, srv KubgoServiceServer) {
	s.RegisterService(&KubgoService_ServiceDesc, srv)
}

func _KubgoService_FindKubgos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubgoServiceServer).FindKubgos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubgo.v1.KubgoService/FindKubgos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubgoServiceServer).FindKubgos(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubgoService_AddKubgo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKubgoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubgoServiceServer).AddKubgo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubgo.v1.KubgoService/AddKubgo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubgoServiceServer).AddKubgo(ctx, req.(*AddKubgoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubgoService_GetKubgo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubgoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubgoServiceServer).GetKubgo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubgo.v1.KubgoService/GetKubgo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubgoServiceServer).GetKubgo(ctx, req.(*GetKubgoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubgoService_DeleteKubgo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKubgoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubgoServiceServer).DeleteKubgo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubgo.v1.KubgoService/DeleteKubgo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubgoServiceServer).DeleteKubgo(ctx, req.(*DeleteKubgoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubgoService_UpdateKubgo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKubgoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubgoServiceServer).UpdateKubgo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubgo.v1.KubgoService/UpdateKubgo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubgoServiceServer).UpdateKubgo(ctx, req.(*UpdateKubgoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KubgoService_ServiceDesc is the grpc.ServiceDesc for KubgoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KubgoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubgo.v1.KubgoService",
	HandlerType: (*KubgoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindKubgos",
			Handler:    _KubgoService_FindKubgos_Handler,
		},
		{
			MethodName: "AddKubgo",
			Handler:    _KubgoService_AddKubgo_Handler,
		},
		{
			MethodName: "GetKubgo",
			Handler:    _KubgoService_GetKubgo_Handler,
		},
		{
			MethodName: "DeleteKubgo",
			Handler:    _KubgoService_DeleteKubgo_Handler,
		},
		{
			MethodName: "UpdateKubgo",
			Handler:    _KubgoService_UpdateKubgo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kubgo/v1/kubgo.proto",
}
