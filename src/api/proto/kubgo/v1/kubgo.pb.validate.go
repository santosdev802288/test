// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kubgo/v1/kubgo.proto

package kubgov1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on HealthResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HealthResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	return nil
}

// HealthResponseValidationError is the validation error returned by
// HealthResponse.Validate if the designated constraints aren't met.
type HealthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthResponseValidationError) ErrorName() string { return "HealthResponseValidationError" }

// Error satisfies the builtin error interface
func (e HealthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthResponseValidationError{}

// Validate checks the field values on FindKubgosResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FindKubgosResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetKubgos() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindKubgosResponseValidationError{
					field:  fmt.Sprintf("Kubgos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FindKubgosResponseValidationError is the validation error returned by
// FindKubgosResponse.Validate if the designated constraints aren't met.
type FindKubgosResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindKubgosResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindKubgosResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindKubgosResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindKubgosResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindKubgosResponseValidationError) ErrorName() string {
	return "FindKubgosResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindKubgosResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindKubgosResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindKubgosResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindKubgosResponseValidationError{}

// Validate checks the field values on GetKubgoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetKubgoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetKubgoRequestValidationError is the validation error returned by
// GetKubgoRequest.Validate if the designated constraints aren't met.
type GetKubgoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubgoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubgoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubgoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubgoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubgoRequestValidationError) ErrorName() string { return "GetKubgoRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetKubgoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubgoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubgoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubgoRequestValidationError{}

// Validate checks the field values on DeleteKubgoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteKubgoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteKubgoRequestValidationError is the validation error returned by
// DeleteKubgoRequest.Validate if the designated constraints aren't met.
type DeleteKubgoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKubgoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKubgoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKubgoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKubgoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKubgoRequestValidationError) ErrorName() string {
	return "DeleteKubgoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKubgoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKubgoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKubgoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKubgoRequestValidationError{}

// Validate checks the field values on UpdateKubgoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateKubgoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetKubgo() == nil {
		return UpdateKubgoRequestValidationError{
			field:  "Kubgo",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetKubgo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateKubgoRequestValidationError{
				field:  "Kubgo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateKubgoRequestValidationError is the validation error returned by
// UpdateKubgoRequest.Validate if the designated constraints aren't met.
type UpdateKubgoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateKubgoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateKubgoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateKubgoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateKubgoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateKubgoRequestValidationError) ErrorName() string {
	return "UpdateKubgoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateKubgoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateKubgoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateKubgoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateKubgoRequestValidationError{}

// Validate checks the field values on GetKubgoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetKubgoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetKubgo() == nil {
		return GetKubgoResponseValidationError{
			field:  "Kubgo",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetKubgo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetKubgoResponseValidationError{
				field:  "Kubgo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetKubgoResponseValidationError is the validation error returned by
// GetKubgoResponse.Validate if the designated constraints aren't met.
type GetKubgoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubgoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubgoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubgoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubgoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubgoResponseValidationError) ErrorName() string { return "GetKubgoResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetKubgoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubgoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubgoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubgoResponseValidationError{}

// Validate checks the field values on DeleteKubgoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteKubgoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetKubgo() == nil {
		return DeleteKubgoResponseValidationError{
			field:  "Kubgo",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetKubgo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteKubgoResponseValidationError{
				field:  "Kubgo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteKubgoResponseValidationError is the validation error returned by
// DeleteKubgoResponse.Validate if the designated constraints aren't met.
type DeleteKubgoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKubgoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKubgoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKubgoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKubgoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKubgoResponseValidationError) ErrorName() string {
	return "DeleteKubgoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteKubgoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKubgoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKubgoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKubgoResponseValidationError{}

// Validate checks the field values on KubgoResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *KubgoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetKubgo() == nil {
		return KubgoResponseValidationError{
			field:  "Kubgo",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetKubgo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KubgoResponseValidationError{
				field:  "Kubgo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// KubgoResponseValidationError is the validation error returned by
// KubgoResponse.Validate if the designated constraints aren't met.
type KubgoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubgoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubgoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubgoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubgoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubgoResponseValidationError) ErrorName() string { return "KubgoResponseValidationError" }

// Error satisfies the builtin error interface
func (e KubgoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubgoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubgoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubgoResponseValidationError{}

// Validate checks the field values on AddKubgoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddKubgoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetKubgo() == nil {
		return AddKubgoRequestValidationError{
			field:  "Kubgo",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetKubgo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddKubgoRequestValidationError{
				field:  "Kubgo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddKubgoRequestValidationError is the validation error returned by
// AddKubgoRequest.Validate if the designated constraints aren't met.
type AddKubgoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddKubgoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddKubgoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddKubgoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddKubgoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddKubgoRequestValidationError) ErrorName() string { return "AddKubgoRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddKubgoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddKubgoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddKubgoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddKubgoRequestValidationError{}

// Validate checks the field values on AddKubgoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddKubgoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetKubgo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddKubgoResponseValidationError{
				field:  "Kubgo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddKubgoResponseValidationError is the validation error returned by
// AddKubgoResponse.Validate if the designated constraints aren't met.
type AddKubgoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddKubgoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddKubgoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddKubgoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddKubgoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddKubgoResponseValidationError) ErrorName() string { return "AddKubgoResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddKubgoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddKubgoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddKubgoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddKubgoResponseValidationError{}

// Validate checks the field values on UpdateKubgoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateKubgoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetKubgo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateKubgoResponseValidationError{
				field:  "Kubgo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateKubgoResponseValidationError is the validation error returned by
// UpdateKubgoResponse.Validate if the designated constraints aren't met.
type UpdateKubgoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateKubgoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateKubgoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateKubgoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateKubgoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateKubgoResponseValidationError) ErrorName() string {
	return "UpdateKubgoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateKubgoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateKubgoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateKubgoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateKubgoResponseValidationError{}

// Validate checks the field values on Kubgo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Kubgo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Cost

	// no validation rules for Activated

	// no validation rules for Address

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return KubgoValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if v, ok := interface{}(m.GetOccurredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KubgoValidationError{
				field:  "OccurredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *Kubgo) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *Kubgo) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// KubgoValidationError is the validation error returned by Kubgo.Validate if
// the designated constraints aren't met.
type KubgoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubgoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubgoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubgoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubgoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubgoValidationError) ErrorName() string { return "KubgoValidationError" }

// Error satisfies the builtin error interface
func (e KubgoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubgo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubgoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubgoValidationError{}

// Validate checks the field values on Kubgos with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Kubgos) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetKubgo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KubgosValidationError{
					field:  fmt.Sprintf("Kubgo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// KubgosValidationError is the validation error returned by Kubgos.Validate if
// the designated constraints aren't met.
type KubgosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubgosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubgosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubgosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubgosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubgosValidationError) ErrorName() string { return "KubgosValidationError" }

// Error satisfies the builtin error interface
func (e KubgosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubgos.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubgosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubgosValidationError{}
