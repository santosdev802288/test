// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import cqrs "dev.azure.com/SiigoDevOps/Siigo/_git/go-cqrs.git/cqrs"
import kubgo "siigo.com/kubgo/src/domain/kubgo"
import mock "github.com/stretchr/testify/mock"

import uuid "dev.azure.com/SiigoDevOps/Siigo/_git/go-cqrs.git/cqrs/uuid"

// IKubgoService is an autogenerated mock type for the IKubgoService type
type IKubgoService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *IKubgoService) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *IKubgoService) Get(id uuid.UUID) (*kubgo.Kubgo, error) {
	ret := _m.Called(id)

	var r0 *kubgo.Kubgo
	if rf, ok := ret.Get(0).(func(uuid.UUID) *kubgo.Kubgo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubgo.Kubgo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadAll provides a mock function with given fields:
func (_m *IKubgoService) LoadAll() ([]*kubgo.Kubgo, error) {
	ret := _m.Called()

	var r0 []*kubgo.Kubgo
	if rf, ok := ret.Get(0).(func() []*kubgo.Kubgo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kubgo.Kubgo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: aggregate, expectedVersion
func (_m *IKubgoService) Save(aggregate cqrs.AggregateRoot, expectedVersion *int) error {
	ret := _m.Called(aggregate, expectedVersion)

	var r0 error
	if rf, ok := ret.Get(0).(func(cqrs.AggregateRoot, *int) error); ok {
		r0 = rf(aggregate, expectedVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: aggregate, expectedVersion
func (_m *IKubgoService) Update(aggregate cqrs.AggregateRoot, expectedVersion *int) error {
	ret := _m.Called(aggregate, expectedVersion)

	var r0 error
	if rf, ok := ret.Get(0).(func(cqrs.AggregateRoot, *int) error); ok {
		r0 = rf(aggregate, expectedVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
